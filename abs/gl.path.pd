#N canvas 460 482 1045 687 12;
#X obj 31 24 inlet;
#X obj 31 992 outlet;
#X text 689 639 RI;
#X obj 31 75 ofelia d path-\$0 \; local c = ofCanvas(this) \; local
args = c:getArgs() \; local mode = args[1] \; local position \, orientation
\, scale = ofVec3f(0 \, 0 \, 0) \, ofVec3f(0 \, 0 \, 0) \, ofVec3f(1
\, 1 \, 1) \; \; function M.new() \; ofWindow.addListener("setup" \,
this) \; if args[1] == nil then mode = 0 else mode = 1 end \; M.setup()
\; end \; \; function M.free() \; ofWindow.removeListener("setup" \,
this) end \; \; function M.setup() \; path\$0 = ofPath() end \; \;
function M.resw(float) resw=float end \; function M.resh(float) resh=float
end \; function M.width(float) width=float end \; function M.height(float)
height=float end \; function M.append() path\$0:append() end \; function
M.newsubpath(float) path\$0:newSubPath() end \; function M.clear(string)
path\$0:clear() end \; function M.close(string) path\$0:close() end
\; function M.stroke(float) path\$0:setStrokeWidth(float) end \; function
M.color(list) path\$0:setColor(ofColor(list[1] \, list[2] \, list[3]))
end \; function M.fillcolor(list) path\$0:setFillColor(ofColor(list[1]
\, list[2] \, list[3])) end \; function M.strokecolor(list) path\$0:setStrokeColor(ofColor(list[1]
\, list[2] \, list[3])) end \; function M.filled(float) path\$0:setFilled(float ~= 0)
end \; function M.mode(float) mode = float path\$0:setMode(mode) end
\; function M.outline() path\$0:hasOutline() end \; function M.tessellate()
path\$0:tessellate() end \; function M.outline() path\$0:hasOutline()
end \; function M.polywinding(float) path\$0:setPolyWindingMode(float)
end \; function M.useshapecolor(float) path\$0:setUseShapeColor(float ~= 0)
end \; function M.simplify(float) path\$0:simplify(float) end \; function
M.circleresolution(float) path\$0:setCircleResolution(float) end \;
function M.curveresolution(float) path\$0:setCircleResolution(float)
end \; function M.rectangle(list) path\$0:rectangle(list[1] \, list[2]
\, list[3] \, list[4] \, list[5]) end \; function M.rectrounded(list)
path\$0:rectRounded(list[1] \, list[2] \, list[3] \, list[4] \, list[5]
\, list[6] \, list[7] \, list[8] \, list[9]) end \; function M.circle(list)
path\$0:circle(list[1] \, list[2] \, list[3] \, list[4]) end \; function
M.triangle(list) path\$0:triangle(list[1] \, list[2] \, list[3] \,
list[4] \, list[5] \, list[6]) end \; function M.ellipse(list) path\$0:ellipse(list[1]
\, list[2] \, list[3] \, list[4] \, list[5]) end \; function M.arc(list)
path\$0:arc(list[1] \, list[2] \, list[3] \, list[4] \, list[5] \,
list[6] \, list[7]) end \; function M.arcnegative(list) path\$0:arcNegative(list[1]
\, list[2] \, list[3] \, list[4] \, list[5] \, list[6] \, list[7])
end \; function M.moveto(list) path\$0:moveTo(list[1] \, list[2] \,
list[3]) end \; function M.lineto(list) path\$0:lineTo(list[1] \, list[2]
\, list[3]) end \; function M.curveto(list) path\$0:lineTo(list[1]
\, list[2] \, list[3]) end \; function M.bezierto(list) path\$0:bezierTo(list[1]
\, list[2] \, list[3] \, list[4] \, list[5] \, list[6]) end \; function
M.quadbezierto(list) path\$0:quadBezierTo(list[1] \, list[2] \, list[3]
\, list[4] \, list[5] \, list[6] \, list[7] \, list[8] \, list[9])
end \; function M.position(l) position:set (l[1] \, l[2] \, l[3]) path\$0:translate(position:vec3())
end \; function M.orientation(l) orientation:set (l[1] \, l[2] \, l[3])
path\$0:rotateDeg(1 \, orientation:vec3()) end \; function M.scale(list)
path\$0:scale(list[1] \, list[2]) end \; \; function M.bang() \; path\$0:draw()
\; return anything \; end \;;
#X f 137;
#X connect 0 0 3 0;
#X connect 3 0 1 0;
