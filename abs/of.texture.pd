#N canvas 267 82 1013 621 12;
#X obj 15 30 inlet;
#X obj 15 683 outlet;
#X obj 308 14 inlet;
#X msg 308 37 open \$1;
#X text 877 721 RI;
#X obj 294 770 ofelia d texture-\$0 \; local canvas = ofCanvas(this)
\; local args = canvas:getArgs() \; local imageDir = canvas:getDir()
.. "/../" \; local texture = ofTexture() \; \; function M.new() \;
ofWindow.addListener("setup" \, this) \; if ofWindow.exists then \;
ofLoadImage(texture \, "../data/earth.jpg") \; end \; end \; \; \;
function M.bang() \; ofDisableArbTex() \; return(anything) \; end \;
;
#X text 413 646 if enable then texture:enableTextures() \; else texture:disableTextures()
\; end \;;
#X msg 75 35 setup;
#X obj 15 71 ofelia d texture-\$0 \; local canvas = ofCanvas(this)
\; local args = canvas:getArgs() \; local filename \, drawimage \,
X \, Y \, Z \, H \, W = args[1] \, args[2] \, 0 \, 0 \, 0 \, 100 \,
100 \; local loaded \, saved \; local texture\$0 = ofTexture() \; local
enable = 1 \; \; function M.new() \; ofWindow.addListener("setup" \,
this) \; end \; function M.setup() \; if filename ~= nil then M.open(filename)
end \; end \; \; function M.allocate(list) texture\$0:allocate(list[1]
\, list[2] \, list[3]) end \; function M.clear() texture\$0:clear()
end \; function M.setimagetype(float) texture\$0:setImageType(float)
end \; function M.draw(l) drawimage =l[1] X=l[2] Y=l[3] Z=l[4] H=l[5]
W=l[6] end \; function M.crop(l) texture\$0:crop(l[1] \, l[2] \, l[3]
\, l[4]) end \; function M.cropfrom(l) texture\$0:cropfrom(image\$0
\, l[1] \, l[2] \, l[3] \, l[4]) end \; function M.drawsubsection(l)
texture\$0:drawSubsection(l[1] \, l[2] \, l[3] \, l[4] \, l[5] \, l[6])
end \; function M.update() texture\$0:update()end \; function M.open(string)
filename = string \; if ofWindow.exists then ofDisableArbTex() texture\$0:clear()
\; loaded = texture\$0:load(filename) end \; if loaded then print("loaded
" .. filename) end \; end \; function M.save(string) \; if ofWindow.exists
then \; saved = texture\$0:save(string) end if saved then print("saved
" .. string) end \; end \; function M.get() return ofTable (loaded
\, texture\$0:getWidth() \, texture\$0:getHeight() \, texture\$0:getImageType()
\, texture\$0:getTexture() \, texture\$0:getPixels())end \; function
M.bang() \; ofDisableArbTex() \; texture\$0:generateMipmap() \; texture\$0:enableMipmap()
\; texture\$0:setTextureMinMagFilter(GL_LINEAR_MIPMAP_LINEAR \, GL_LINEAR)
\; texture\$0:draw(0 \, 0) \; return(anything) \; end \;;
#X f 138;
#X connect 0 0 8 0;
#X connect 2 0 3 0;
#X connect 3 0 8 0;
#X connect 7 0 8 0;
#X connect 8 0 1 0;
