#N canvas 496 371 784 755 12;
#X obj 31 24 inlet;
#X obj 31 1114 outlet;
#X obj 90 22 inlet;
#X obj 160 22 inlet;
#X text 814 775 RI;
#X msg 90 48 size \$1;
#X msg 160 48 amount \$1;
#X obj 31 75 ofelia d plane-\$0 \; local c = ofCanvas(this) \; local
args = c:getArgs() \; local size \, drawmode \, strokeweight \, mode
\, width \, height = args[1] \, args[2] \, args[3] \, 0 \, 100 \, 100
\; local position \, orientation \, scale \, lookat = ofVec3f() \,
ofVec3f() \, ofVec3f(1 \, 1 \, 1) \, ofVec3f() \; local amount= 10
\; local node\$0 = ofNode() \; \; function M.new() \; ofWindow.addListener("setup"
\, this) \; if args[1] == nil then size = 10 end \; if args[2] == nil
then drawmode = "fill" end \; if args[3] == nil then strokeweight =
1 end \; if args[4] == nil then mode = 0 end \; M.setup() \; end \;
\; function M.free() \; ofWindow.removeListener("setup" \, this) end
\; \; function M.setup() \; plane\$0 = ofMesh() \; for x = 1 \, size
do \; for y = 1 \, size do \; plane\$0:addVertex(ofPoint(x - size/2
\, y - size/2):vec3()) \; end \; end \; \; for x = 0 \, size - 2 do
\; for y = 0 \, size - 2 do \; plane\$0:addIndex(x + y * size) \; plane\$0:addIndex((x
+ 1) + y * size) \; plane\$0:addIndex(x + (y + 1) * size) \; plane\$0:addIndex((x
+ 1) + y * size) \; plane\$0:addIndex((x + 1) + (y + 1) * size) \;
plane\$0:addIndex(x + (y + 1) * size) \; end end \; for i = 0 \, plane\$0:getNumVertices()
do \; plane\$0:addTexCoord(ofVec2f(plane\$0:getVertex(i)):vec2()) end
end \; \; function M.list(l) M.width(l[1]) M.height(l[2]) M.columns(l[3])
M.rows(l[4]) M.draw(l[5]) M.stroke(l[6]) end \; function M.width(f)
width = f end \; function M.height(f) height = f end \; function M.mode(f)
mode = f end \; function M.draw(s) drawmode = s end \; function M.stroke(f)
strokeweight=f end \; function M.amount(float) amount=float end \;
function M.size(f) size = ofClamp(f \, 0 \, 50) M.setup() end \; function
M.position(l) position:set(table.unpack(l)) node\$0:setPosition(position:vec3())
end \; function M.orientation(l) orientation:set(table.unpack(l)) node\$0:setOrientation(orientation:vec3())
end \; function M.scale(l) scale:set(table.unpack(l)) node\$0:setScale(scale:vec3())
end \; function M.lookat(l) lookat:set(table.unpack(l)) node\$0:lookAt(lookat:vec3())
end \; function M.texture(f) if f > 0 then plane\$0:enableTextures()
else plane\$0:disableTextures() end end \; function M.texturemap(l)
plane\$0:mapTexCoords(l[1] \, l[2] \, l[3] \, l[4]) end \; \; function
M.bang() \; ofPushMatrix() node\$0:transformGL() \; \; ofSetLineWidth(strokeweight)
\; local count = 0 \; for x = 1 \, size do \; for y = 1 \, size do
\; local position = ofVec3f(plane\$0:getVertex(count)) \; position.z
= ofMap(ofNoise(count \, ofGetElapsedTimef()) \, 0 \, 1 \, 0 \, amount)
\; plane\$0:setVertex(count \, position:vec3()) \; count = count +
1 end \; plane\$0:setMode(mode) \; end \; ofScale(width/size \, height/size
\, 10) \; if drawmode == "fill" then plane\$0:draw() end \; if drawmode
== "point" then plane\$0:drawVertices() end \; if drawmode == "line"
then plane\$0:drawWireframe() end \; if drawmode == "normal" then plane\$0:drawNormals(normalsize)
end \; ofPopMatrix() node\$0:restoreTransformGL() \; \; return anything
\; end \;;
#X f 115;
#X connect 0 0 7 0;
#X connect 2 0 5 0;
#X connect 3 0 6 0;
#X connect 5 0 7 0;
#X connect 6 0 7 0;
#X connect 7 0 1 0;
