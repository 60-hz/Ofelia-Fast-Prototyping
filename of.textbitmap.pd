#N canvas 440 178 1230 585 12;
#X obj 21 14 inlet;
#X text 1188 500 RI;
#X obj 21 527 outlet;
#X obj 21 64 ofelia d \$0-textpix \; local c = ofCanvas(this) \; local
args = c:getArgs() \; local text \, fgcolor \, bgcolor \, bitmapmode
= "my text" \, ofColor() \, ofColor(255 \, 255 \, 255 \, 0) \, 0 \;
local position \, orientation \, scale = ofVec3f() \, ofVec3f() \,
ofVec3f(1 \, 1 \, 1) \; \; function M.new() \; node\$0 = ofNode() ofWindow.addListener("setup"
\, this) \; if args[1] == nil then text = "of.textpix" else text =
args[1] end \; if args[2] == nil then bitmapmode = 0 else bitmapmode
= args[2] end \; end \; \; function M.free() \; ofWindow.removeListener("setup"
\, this) end \; \; function M.text(l) if type(l)=="table" then text=(table.concat
(l \, " ")) elseif type(l)=="string" then text=l else text="" end end
\; function M.string(l) if type(l)=="table" then text=(string.char(table.unpack(l)))
elseif type(l)=="number" then text = (string.char(l)) else text=""
end end \; function M.list(l) if type(l)=="table" then text=(string.char(table.unpack(l)))
elseif type(l)=="number" then text = (string.char(l)) else text=""
end end \; function M.bitmapmode(f) bitmapmode = f end \; function
M.bgcolor(l) bgcolor:set(table.unpack(l)) end \; function M.fgcolor(l)
fgcolor:set(table.unpack(l)) end \; function M.position(l) position:set
(table.unpack(l)) node\$0:setPosition(position:vec3()) end \; function
M.orientation(l) orientation:set (table.unpack(l)) node\$0:setOrientation(orientation:vec3())
end \; function M.scale(l) scale:set (table.unpack(l)) node\$0:setScale(scale:vec3())
end \; function decode(t) \; for i=1 \, #t do t[i]=string.char(t[i])
end \; return table.concat(t) end \; \; function M.bang() \; node\$0:transformGL()
\; ofSetDrawBitmapMode(bitmapmode) \; ofDrawBitmapStringHighlight(text
\, 0 \, 0 \, bgcolor \, fgcolor) node\$0:restoreTransformGL() \; end
\;;
#X f 169;
#X connect 0 0 3 0;
#X connect 3 0 2 0;
